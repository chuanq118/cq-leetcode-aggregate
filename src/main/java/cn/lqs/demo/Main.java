package cn.lqs.demo;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 011010100000000101
        // amnbocpdefghijkqlr
        // System.out.println('m' - 'a');
        // int c0 = 99831;
        // int c1 = 100072;
        // double rate = 0.49939720764570816;
        // System.out.println(26 * rate);
        // int a0_1 = (int) Math.floor(26 * rate);
        // int a1_1 = 26 - a0_1;
        // int a0_2 = (int) Math.ceil(26 * rate);
        // int a1_2 = 26 - a0_2;
        // int maxT1 = Math.max((c0 / a0_1) + (c0 % a0_1 == 0 ? 0 : 1), (c1 / a1_1) + (c1 % a1_1 == 0 ? 0 : 1));
        // int maxT2 = Math.max((c0 / a0_2) + (c0 % a0_2 == 0 ? 0 : 1), (c1 / a1_2) + (c1 % a1_2 == 0 ? 0 : 1));
        // int a0 = maxT1 < maxT2 ? a0_1 : a0_2;
        // int a1 = maxT1 < maxT2 ? a1_1 : a1_2;


        Scanner in = new Scanner(System.in);
        String s
        int c0 = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '0'){
                c0 += 1;
            }
        }
        // int n0 = 0;
        // if (c0 == (s.length() - c0)) {
        //     n0 = 13;
        // }else{
        //     double rate = (double) c0 / s.length();
        //     if (s.startsWith{
        //         System.out.println("rate = " + rate);
        //         System.out.println("c0 = " + c0);
        //         System.out.println("c1 = " + (s.length() - c0));
        //     }
        //     int a1 = rate < 0.5 ? (int) Math.floor(26 * rate) : (int) Math.ceil(26 * rate);
        //     n0 = Math.min(a1, c0);
        // }

        int c1 = s.length() - c0;

        int n0 = c0 == 0 ? 0 : 26;
        if (c1 != 0 && c0 != 0){
            double rate = (double) c0 / s.length();
            int a0_1 = Math.min((int) Math.floor(26 * rate), c0);
            if (a0_1 == 0 && c0 != 0) {
                a0_1 = c0;
            }
            int a1_1 = 26 - a0_1;
            int a0_2 = Math.min((int) Math.ceil(26 * rate), c0);
            if (a0_2 == 0 && c0 != 0) {
                a0_2 = c0;
            }
            int a1_2 = 26 - a0_2;
            int maxT1 = Math.max((c0 / a0_1) + (c0 % a0_1 == 0 ? 0 : 1), (c1 / a1_1) + (c1 % a1_1 == 0 ? 0 : 1));
            int maxT2 = Math.max((c0 / a0_2) + (c0 % a0_2 == 0 ? 0 : 1), (c1 / a1_2) + (c1 % a1_2 == 0 ? 0 : 1));
            n0 = maxT1 < maxT2 ? a0_1 : a0_2;
        }

        int idx0 = 0;
        int idx1 = n0;
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '0'){
                sb.append((char)('a' + idx0));
                idx0 += 1;
                if(idx0 == n0){
                    idx0 = 0;
                }
            }else{
                sb.append((char)('a' + idx1));
                idx1 += 1;
                if(idx1 == 26){
                    idx1 = n0;
                }
            }
        }
        System.out.println(sb.toString());
    }
}